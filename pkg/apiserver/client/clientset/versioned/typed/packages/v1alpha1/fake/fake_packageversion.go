// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/vmware-tanzu/carvel-kapp-controller/pkg/apiserver/apis/packages/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePackageVersions implements PackageVersionInterface
type FakePackageVersions struct {
	Fake *FakePackageV1alpha1
}

var packageversionsResource = schema.GroupVersionResource{Group: "package.carvel.dev", Version: "v1alpha1", Resource: "packageversions"}

var packageversionsKind = schema.GroupVersionKind{Group: "package.carvel.dev", Version: "v1alpha1", Kind: "PackageVersion"}

// Get takes name of the packageVersion, and returns the corresponding packageVersion object, and an error if there is any.
func (c *FakePackageVersions) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.PackageVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(packageversionsResource, name), &v1alpha1.PackageVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PackageVersion), err
}

// List takes label and field selectors, and returns the list of PackageVersions that match those selectors.
func (c *FakePackageVersions) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.PackageVersionList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(packageversionsResource, packageversionsKind, opts), &v1alpha1.PackageVersionList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.PackageVersionList{ListMeta: obj.(*v1alpha1.PackageVersionList).ListMeta}
	for _, item := range obj.(*v1alpha1.PackageVersionList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested packageVersions.
func (c *FakePackageVersions) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(packageversionsResource, opts))
}

// Create takes the representation of a packageVersion and creates it.  Returns the server's representation of the packageVersion, and an error, if there is any.
func (c *FakePackageVersions) Create(ctx context.Context, packageVersion *v1alpha1.PackageVersion, opts v1.CreateOptions) (result *v1alpha1.PackageVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(packageversionsResource, packageVersion), &v1alpha1.PackageVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PackageVersion), err
}

// Update takes the representation of a packageVersion and updates it. Returns the server's representation of the packageVersion, and an error, if there is any.
func (c *FakePackageVersions) Update(ctx context.Context, packageVersion *v1alpha1.PackageVersion, opts v1.UpdateOptions) (result *v1alpha1.PackageVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(packageversionsResource, packageVersion), &v1alpha1.PackageVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PackageVersion), err
}

// Delete takes name of the packageVersion and deletes it. Returns an error if one occurs.
func (c *FakePackageVersions) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(packageversionsResource, name), &v1alpha1.PackageVersion{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePackageVersions) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(packageversionsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.PackageVersionList{})
	return err
}

// Patch applies the patch and returns the patched packageVersion.
func (c *FakePackageVersions) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.PackageVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(packageversionsResource, name, pt, data, subresources...), &v1alpha1.PackageVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PackageVersion), err
}
